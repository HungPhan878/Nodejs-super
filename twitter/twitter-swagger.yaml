openapi: 3.0.3
info:
  title: Clone Twitter - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_

    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:4000
tags:
  - name: users
    description: Các API liên quan đến người dùng twitter

paths:
  /users/login:
    post:
      tags:
        - users
      summary: Đăng nhập
      description: Đăng nhập vào hệ thống X clone
      operationId: loginUser
      requestBody:
        description: Dữ liệu đăng nhập
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginBody'
      responses:
        '200':
          description: Đăng nhập thành công
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Login successfully'
                  result:
                    $ref: '#/components/schemas/SuccessAuthentication'
        '400':
          description: Invalid input
  /users/me:
    get:
      tags:
        - users
      summary: Lấy thông tin người dùng đang đăng nhập
      description: Lấy thông tin người dùng đang đăng nhập
      operationId: getMe
      security:
        - BearerAuth: []

      responses:
        '200':
          description: Lấy thông tin của tôi thành công
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Login successfully'
                  result:
                    $ref: '#/components/schemas/UserProfile'
components:
  schemas:
    LoginBody:
      type: object
      properties:
        email:
          type: string
          example: 'richgrimes452+1@gmail.com'
        password:
          type: string
          example: 'Hung789789!'
    SuccessAuthentication:
      type: object
      properties:
        access_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjRiZTBhZDJlNDNkMjQ2NDM5NGZlZWRiIiwidG9rZW5fdHlwZSI6MCwidmVyaWZ5IjoxLCJpYXQiOjE2OTEzODMyMjYsImV4cCI6MTY5MTQ2OTYyNn0.HTLX20cB7_z0c9c8FDg3MIx6RJEELHHlmJNZa94ku-o
        refresh_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjc4OTI4YTMxMzY4M2Q0MDkwZGJiZDc1IiwidG9rZW5fdHlwZSI6MSwidmVyaWZ5IjoxLCJpYXQiOjE3Mzg3NTQ0MTYsImV4cCI6MTc0NzM5NDQxNn0.Mq8AyBQI8uN7hfP6FIT9Wg-S_KY69GlPpzFziKNSRNY.bFnaBfxWl-Q48HCwAeMpNzZwTO9LEjcBd7Zyipjqr64
    UserProfile:
      type: object
      properties:
        _id:
          type: string
          format: MongoId
          example: '678928a313683d4090dbbd75'
        name:
          type: string
          example: 'RIch'
        email:
          type: string
          format: email
          example: 'richgrimes452@gmail.com'
        date_of_birth:
          type: string
          format: ISO8601
          example: '2024-11-15T03:38:33.033Z'
        created_at:
          type: string
          format: ISO8601
          example: '2025-01-16T15:41:23.453Z'
        updated_at:
          type: string
          format: ISO8601
          example: '2025-02-05T11:13:48.717Z'
        verify:
          $ref: '#/components/schemas/UserVerifyStatus'
        twitter_circle:
          type: array
          items:
            type: string
            format: MongoId
          example: ['678928a313683d4090dbbdbe', '677928a314753d4090dbbd79']
        bio:
          type: string
          example: 'Just a tech enthusiast.'
        location:
          type: string
          example: 'New York, USA'
        website:
          type: string
          example: 'https://hungphan.dev'
        username:
          type: string
          example: 'user678928a313683d4090dbbd75'
        avatar:
          type: string
          example: 'http://localhost:4000/images/avatar.jpg'
        cover_photo:
          type: string
          example: 'https://localhost:4000/images/cover.jpg'
    UserVerifyStatus:
      type: number
      enum: ['Unverified', 'Verified', 'Banned']
      example: 1
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
