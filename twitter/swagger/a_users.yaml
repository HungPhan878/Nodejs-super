openapi: 3.0.3
info:
  title: Clone Twitter - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_

    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https//hung.vuahocvualamduan.org
tags:
  - name: users
    description: Các API liên quan đến người dùng twitter

paths:
  /users/login:
    post:
      tags:
        - users
      summary: Login
      description: Log in to the X clone system
      operationId: loginUser
      requestBody:
        description: Login data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginBody'
      responses:
        '200':
          description: Login successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Login successfully'
                  result:
                    $ref: '#/components/schemas/SuccessAuthentication'
        '400':
          description: Invalid input
  /users/me:
    get:
      tags:
        - users
      summary: Get the currently logged-in user information
      description: Get the information of the currently logged-in user
      operationId: getMe
      security:
        - BearerAuth: []

      responses:
        '200':
          description: Get my information successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Get my profile successfully'
                  result:
                    $ref: '#/components/schemas/MyProfile'
        '401':
          description: access token is required
    patch:
      tags:
        - users
      summary: Update my profile
      description: Update user's profile information
      operationId: updateProfile
      security:
        - BearerAuth: []
      requestBody:
        description: User profile data to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                date_of_birth:
                  type: string
                bio:
                  type: string
                location:
                  type: string
      responses:
        '200':
          description: Update my profile success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Update my profile success'
                  result:
                    $ref: '#/components/schemas/MyProfile'
        '422':
          description: 'Invalid input'
  /users/logout:
    post:
      tags:
        - users
      summary: Logout a user
      description: Logs out an authenticated user
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
                  example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjc4OTI4YTMxMzY4M2Q0MDkwZGJiZDc1IiwidG9rZW5fdHlwZSI6MSwidmVyaWZ5IjoxLCJpYXQiOjE3Mzg3NTQ0MTYsImV4cCI6MTc0NzM5NDQxNn0.Mq8AyBQI8uN7hfP6FIT9Wg-S_KY69GlPpzFziKNSRNY'
      responses:
        '200':
          description: Logout successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Logout successfully'
                  result:
                    type: object
                    properties:
                      acknowledged:
                        type: boolean
                        example: true
                      deletedCount:
                        type: integer
                        example: 1
        '401':
          description: JWT expired
  /users/register:
    post:
      tags:
        - users
      summary: Register a new user
      description: |
        Registers a new user with the provided details

         **⚠️ Lưu ý quan trọng:**  
         - Hệ thống gửi email xác thực qua **AWS SES**, nhưng hiện tại **chưa được đưa ra khỏi môi trường Sandbox**.  
         - Nếu bạn đăng ký bằng email chưa được xác minh, hệ thống sẽ trả về lỗi **500** nhưng tài khoản vẫn sẽ được tạo.  
         - Để nhận email xác thực, vui lòng sử dụng một trong các email sau:  
            richgrimes452+number@gmail.com
          ```
          và dùng resend-verify-email để gửi lại email_verify_token và dùng verify-email để xác minh email
          ```
          Ví dụ:  
          - `richgrimes452+10@gmail.com`  
         **Xin lỗi vì sự bất tiện này!**
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: Register successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Register successfully'
                  result:
                    $ref: '#/components/schemas/SuccessAuthentication'
        '422':
          description: 'Email already exists'
  /users/refresh-token:
    post:
      tags:
        - users
      summary: Create a new access token
      description: Generates a new access token using a refresh token
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Refresh token successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenResponse'
        '401':
          description: Invalid signature
  /users/resend-verify-email:
    post:
      summary: Resend Verify Email Address
      description: Resend verification email to the user.
      tags:
        - users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Resend verify email successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Resend verify email successfully'
                  result:
                    $ref: '#/components/schemas/ResendVerifyEmailResponse'
        '401':
          description: 'Access token is required'
  /users/verify-email:
    post:
      summary: Verify Email Address
      description: Verify the user's email address using the provided token.
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email_verify_token:
                  type: string
                  example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjdjNGNhMmQ4NWE2ZDcyNjA4OWZhNTVlIiwidG9rZW5fdHlwZSI6MCwidmVyaWZ5IjoxLCJpYXQiOjE3NDA5NTAzNTMsImV4cCI6MTc0MTAzNjc1M30.FsnhbqVCIitLtJ2YDCzzxfrrgz2af_dmdutw-nYpuv4'
      responses:
        '200':
          description: Email verify successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Email verify successfully'
                  result:
                    $ref: '#/components/schemas/SuccessAuthentication'
        '401':
          description: 'Access token is required'
  /users/forgot-password:
    post:
      tags:
        - users
      summary: Reset password
      description: Initiates a password reset process by sending an email with a reset token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
      responses:
        '200':
          description: Check email successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForgotPasswordResponse'
  /users/verify-forgot-password:
    post:
      tags:
        - users
      summary: Verify forgot password token
      description: Verifies the validity of a forgot password token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyForgotPasswordRequest'
      responses:
        '200':
          description: Verify forgot password success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyForgotPasswordResponse'
        '401':
          description: Jwt expired
  /users/reset-password:
    post:
      tags:
        - users
      summary: Reset password again
      description: Resets the user's password using a forgot password token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: Reset password successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetPasswordResponse'
        '422':
          description: Invalid input
  /users/{username}:
    get:
      summary: Get user profile by username
      tags:
        - users
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
            example: 'user675281891ad3a4ccb79be11c'
      responses:
        '200':
          description: Successfully retrieved profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Get profile success'
                  result:
                    $ref: '#/components/schemas/UserProfile'
        '404':
          description: User not found
  /users/follow:
    post:
      summary: Follow a user
      tags:
        - users
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FollowRequest'
      responses:
        '200':
          description: Successfully followed user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FollowResponse'
        '403':
          description: 'User not verified'
  /users/follow/{user_id}:
    delete:
      summary: Unfollow a user
      tags:
        - users
      security:
        - BearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            example: '678928a313683d4090dbbd75'
      responses:
        '200':
          description: Successfully unfollowed user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnfollowResponse'
        '404':
          description: User not found
  /users/change-password:
    put:
      summary: Change password
      tags:
        - users
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordBody'
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangePasswordResponse'
        '422':
          description: 'Old password not match'
